Program SourceElement Statement Block StatementList ImportStatement ImportFromBlock ModuleItems ImportDefault ImportNamespace ImportFrom AliasName ExportDeclaration ExportDefaultDeclaration ExportFromBlock Declaration VariableStatement VariableDeclarationList VariableDeclaration EmptyStatement ExpressionStatement IfStatement DoStatement WhileStatement ForStatement ForInStatement ForOfStatement VarModifier ContinueStatement BreakStatement ReturnStatement YieldStatement WithStatement SwitchStatement CaseBlock CaseClauses CaseClause DefaultClause LabelledStatement ThrowStatement TryStatement CatchProduction FinallyProduction DebuggerStatement FunctionDeclaration ClassDeclaration ClassTail ClassElement MethodDefinition FormalParameterList FormalParameterArg LastFormalParameterArg FunctionBody SourceElements ArrayLiteral ElementList ArrayElement PropertyExpressionAssignment ComputedPropertyExpressionAssignment FunctionProperty PropertyGetter PropertySetter PropertyShorthand PropertyName Arguments Argument ExpressionSequence TemplateStringExpression TernaryExpression LogicalAndExpression PowerExpression PreIncrementExpression ObjectLiteralExpression MetaExpression InExpression LogicalOrExpression NotExpression PreDecreaseExpression ArgumentsExpression AwaitExpression ThisExpression FunctionExpression UnaryMinusExpression AssignmentExpression PostDecreaseExpression TypeofExpression InstanceofExpression UnaryPlusExpression DeleteExpression ImportExpression EqualityExpression BitXOrExpression SuperExpression MultiplicativeExpression BitShiftExpression ParenthesizedExpression AdditiveExpression RelationalExpression PostIncrementExpression YieldExpression BitNotExpression NewExpression LiteralExpression ArrayLiteralExpression MemberDotExpression ClassExpression MemberIndexExpression IdentifierExpression BitAndExpression BitOrExpression AssignmentOperatorExpression VoidExpression CoalesceExpression Assignable ObjectLiteral FunctionDecl AnoymousFunctionDecl ArrowFunction ArrowFunctionParameters ArrowFunctionBody AssignmentOperator Literal NumericLiteral BigintLiteral Getter Setter IdentifierName Identifier ReservedWord Keyword Let Eos [ ] ( ) { } ; , = ?  ... . ++ -- + - ~ ! * / % ** ?? # >> << >>> < > <= >= == != === !== & ^ | && || *= /= %= += -= <<= >>= >>>= &= ^= |= **= => null true false break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try as from class enum extends super const export import async await implements let private public interface package protected static yield StringLiteral function_name array_name index_para variable_name formalparameter expression_para